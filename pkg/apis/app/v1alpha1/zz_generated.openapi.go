// +build !

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.CAs":            schema_pkg_apis_app_v1alpha1_CAs(ref),
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.CAsSpec":        schema_pkg_apis_app_v1alpha1_CAsSpec(ref),
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.CAsStatus":      schema_pkg_apis_app_v1alpha1_CAsStatus(ref),
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.Orderers":       schema_pkg_apis_app_v1alpha1_Orderers(ref),
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.OrderersSpec":   schema_pkg_apis_app_v1alpha1_OrderersSpec(ref),
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.OrderersStatus": schema_pkg_apis_app_v1alpha1_OrderersStatus(ref),
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.Peers":          schema_pkg_apis_app_v1alpha1_Peers(ref),
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.PeersSpec":      schema_pkg_apis_app_v1alpha1_PeersSpec(ref),
		"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.PeersStatus":    schema_pkg_apis_app_v1alpha1_PeersStatus(ref),
	}
}

func schema_pkg_apis_app_v1alpha1_CAs(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CAs is the Schema for the cas API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.CAsSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.CAsStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.CAsSpec", "cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.CAsStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1alpha1_CAsSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CAsSpec defines the desired state of CAs",
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.metadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.spec"),
						},
					},
				},
				Required: []string{"apiVersion", "kind", "metadata", "spec"},
			},
		},
		Dependencies: []string{
			"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.metadata", "cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.spec"},
	}
}

func schema_pkg_apis_app_v1alpha1_CAsStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "CAsStatus defines the observed state of CAs",
				Properties: map[string]spec.Schema{
					"certiAuth": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"certiAuth"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_app_v1alpha1_Orderers(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Orderers is the Schema for the orderers API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.OrderersSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.OrderersStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.OrderersSpec", "cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.OrderersStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1alpha1_OrderersSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrderersSpec defines the desired state of Orderers",
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.metadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.spec"),
						},
					},
				},
				Required: []string{"apiVersion", "kind", "metadata", "spec"},
			},
		},
		Dependencies: []string{
			"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.metadata", "cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.spec"},
	}
}

func schema_pkg_apis_app_v1alpha1_OrderersStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "OrderersStatus defines the observed state of Orderers",
				Properties: map[string]spec.Schema{
					"orderers": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"orderers"},
			},
		},
		Dependencies: []string{},
	}
}

func schema_pkg_apis_app_v1alpha1_Peers(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Peers is the Schema for the peers API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.PeersSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.PeersStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.PeersSpec", "cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.PeersStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1alpha1_PeersSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PeersSpec defines the desired state of Peers",
				Properties: map[string]spec.Schema{
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"kind": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.metadata"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.spec"),
						},
					},
				},
				Required: []string{"apiVersion", "kind", "metadata", "spec"},
			},
		},
		Dependencies: []string{
			"cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.metadata", "cello/k8s-fabric-operator/pkg/apis/app/v1alpha1.spec"},
	}
}

func schema_pkg_apis_app_v1alpha1_PeersStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PeersStatus defines the observed state of Peers",
				Properties: map[string]spec.Schema{
					"peers": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
				},
				Required: []string{"peers"},
			},
		},
		Dependencies: []string{},
	}
}
